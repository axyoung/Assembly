
AVRASM ver. 2.2.8  C:\Users\Alex\Documents\Atmel Studio\7.0\Final\Final\ece375_final.asm Thu Mar 18 20:47:41 2021

[builtin](2): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m128def.inc'
C:\Users\Alex\Documents\Atmel Studio\7.0\Final\Final\ece375_final.asm(7): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m128def.inc'
[builtin](2): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m128def.inc'
C:\Users\Alex\Documents\Atmel Studio\7.0\Final\Final\ece375_final.asm(7): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m128def.inc'
                                 
                                 ;***********************************************************
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega128.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m128def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega128
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega128
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M128DEF_INC_
                                 #define _M128DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega128
                                 #pragma AVRPART ADMIN PART_NAME ATmega128
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x97
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UCSR1C	= 0x9d	; MEMORY MAPPED
                                 .equ	UDR1	= 0x9c	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0x9b	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0x9a	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0x98	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0x99	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0x95	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0x90	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x8c	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x8b	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x8a	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x88	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x89	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x86	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x87	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x84	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x85	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x82	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x83	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x80	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x81	; MEMORY MAPPED
                                 .equ	ETIMSK	= 0x7d	; MEMORY MAPPED
                                 .equ	ETIFR	= 0x7c	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x7a	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x78	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x79	; MEMORY MAPPED
                                 .equ	TWCR	= 0x74	; MEMORY MAPPED
                                 .equ	TWDR	= 0x73	; MEMORY MAPPED
                                 .equ	TWAR	= 0x72	; MEMORY MAPPED
                                 .equ	TWSR	= 0x71	; MEMORY MAPPED
                                 .equ	TWBR	= 0x70	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x6f	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x6d	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x6c	; MEMORY MAPPED
                                 .equ	EICRA	= 0x6a	; MEMORY MAPPED
                                 .equ	SPMCSR	= 0x68	; MEMORY MAPPED
                                 .equ	PORTG	= 0x65	; MEMORY MAPPED
                                 .equ	DDRG	= 0x64	; MEMORY MAPPED
                                 .equ	PING	= 0x63	; MEMORY MAPPED
                                 .equ	PORTF	= 0x62	; MEMORY MAPPED
                                 .equ	DDRF	= 0x61	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	XDIV	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	EICRB	= 0x3a
                                 .equ	EIMSK	= 0x39
                                 .equ	EIFR	= 0x38
                                 .equ	TIMSK	= 0x37
                                 .equ	TIFR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OCR0	= 0x31
                                 .equ	ASSR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	OCDR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	SFIOR	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR0	= 0x0c
                                 .equ	UCSR0A	= 0x0b
                                 .equ	UCSR0B	= 0x0a
                                 .equ	UBRR0L	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	PORTE	= 0x03
                                 .equ	DDRE	= 0x02
                                 .equ	PINE	= 0x01
                                 .equ	PINF	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR00	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR01	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR02	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR03	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR04	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR05	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR06	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR07	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	UCSZ2	= UCSZ02	; For compatibility
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL0	= 6	; USART Mode Select
                                 
                                 ; UBRR0H - USART Baud Rate Register Hight Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR10	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR11	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR12	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR13	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR14	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR15	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR16	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR17	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL1	= 6	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register Hight Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	SM2	= 2	; Sleep Mode Select
                                 .equ	SM0	= 3	; Sleep Mode Select
                                 .equ	SM1	= 4	; Sleep Mode Select
                                 .equ	SE	= 5	; Sleep Enable
                                 .equ	SRW10	= 6	; External SRAM Wait State Select
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW11	= 1	; Wait state select bit upper page
                                 .equ	SRW00	= 2	; Wait state select bit lower page
                                 .equ	SRW01	= 3	; Wait state select bit lower page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value
                                 .equ	CAL1	= 1	; Oscillator Calibration Value
                                 .equ	CAL2	= 2	; Oscillator Calibration Value
                                 .equ	CAL3	= 3	; Oscillator Calibration Value
                                 .equ	CAL4	= 4	; Oscillator Calibration Value
                                 .equ	CAL5	= 5	; Oscillator Calibration Value
                                 .equ	CAL6	= 6	; Oscillator Calibration Value
                                 .equ	CAL7	= 7	; Oscillator Calibration Value
                                 
                                 ; XDIV - XTAL Divide Control Register
                                 .equ	XDIV0	= 0	; XTAl Divide Select Bit 0
                                 .equ	XDIV1	= 1	; XTAl Divide Select Bit 1
                                 .equ	XDIV2	= 2	; XTAl Divide Select Bit 2
                                 .equ	XDIV3	= 3	; XTAl Divide Select Bit 3
                                 .equ	XDIV4	= 4	; XTAl Divide Select Bit 4
                                 .equ	XDIV5	= 5	; XTAl Divide Select Bit 5
                                 .equ	XDIV6	= 6	; XTAl Divide Select Bit 6
                                 .equ	XDIVEN	= 7	; XTAL Divide Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMCR	= SPMCSR	; For compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 
                                 ; ***** MISC *************************
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR321	= 0	; Prescaler Reset Timer/Counter3, Timer/Counter2, and Timer/Counter1
                                 .equ	PSR1	= PSR321	; For compatibility
                                 .equ	PSR2	= PSR321	; For compatibility
                                 .equ	PSR3	= PSR321	; For compatibility
                                 .equ	PSR0	= 1	; Prescaler Reset Timer/Counter0
                                 .equ	PUD	= 2	; Pull Up Disable
                                 ;.equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	GICR	= EIMSK	; For compatibility
                                 .equ	GIMSK	= EIMSK	; For compatibility
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	GIFR	= EIFR	; For compatibility
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 0
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; ASSR - Asynchronus Status Register
                                 .equ	TCR0UB	= 0	; Timer/Counter Control Register 0 Update Busy
                                 .equ	OCR0UB	= 1	; Output Compare register 0 Busy
                                 .equ	TCN0UB	= 2	; Timer/Counter0 Update Busy
                                 .equ	AS0	= 3	; Asynchronus Timer/Counter 0
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR0	= 1	; Prescaler Reset Timer/Counter0
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; ETIMSK - Extended Timer/Counter Interrupt Mask Register
                                 .equ	OCIE1C	= 0	; Timer/Counter 1, Output Compare Match C Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; ETIFR - Extended Timer/Counter Interrupt Flag register
                                 .equ	OCF1C	= 0	; Timer/Counter 1, Output Compare C Match Flag
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR321	= 0	; Prescaler Reset, T/C3, T/C2, T/C1
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode Bit 0
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode Bit 1
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Clock Select bit 0
                                 .equ	CS11	= 1	; Clock Select 1 bit 1
                                 .equ	CS12	= 2	; Clock Select1 bit 2
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare for channel C
                                 .equ	FOC1B	= 6	; Force Output Compare for channel B
                                 .equ	FOC1A	= 7	; Force Output Compare for channel A
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TCCR2 - Timer/Counter Control Register
                                 .equ	CS20	= 0	; Clock Select
                                 .equ	CS21	= 1	; Clock Select
                                 .equ	CS22	= 2	; Clock Select
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Match Output Mode
                                 .equ	COM21	= 5	; Compare Match Output Mode
                                 .equ	WGM20	= 6	; Wafeform Generation Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter Register
                                 .equ	TCNT2_0	= 0	; Timer/Counter Register Bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter Register Bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter Register Bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter Register Bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter Register Bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter Register Bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter Register Bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter Register Bit 7
                                 
                                 ; OCR2 - Output Compare Register
                                 .equ	OCR2_0	= 0	; Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Output Compare Register Bit 7
                                 
                                 ; TIMSK - 
                                 .equ	TOIE2	= 6	; 
                                 .equ	OCIE2	= 7	; 
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; ETIMSK - Extended Timer/Counter Interrupt Mask Register
                                 .equ	OCIE3C	= 1	; Timer/Counter3, Output Compare Match Interrupt Enable
                                 .equ	TOIE3	= 2	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3B	= 3	; Timer/Counter3 Output CompareB Match Interrupt Enable
                                 .equ	OCIE3A	= 4	; Timer/Counter3 Output CompareA Match Interrupt Enable
                                 .equ	TICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; ETIFR - Extended Timer/Counter Interrupt Flag register
                                 .equ	OCF3C	= 1	; Timer/Counter3 Output Compare C Match Flag
                                 .equ	TOV3	= 2	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3B	= 3	; Output Compare Flag 1B
                                 .equ	OCF3A	= 4	; Output Compare Flag 1A
                                 .equ	ICF3	= 5	; Input Capture Flag 1
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR321	= 0	; Prescaler Reset, T/C3, T/C2, T/C1
                                 ;.equ	PSR1	= PSR321	; For compatibility
                                 ;.equ	PSR2	= PSR321	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode Bit 0
                                 .equ	PWM30	= WGM30	; For compatibility
                                 .equ	WGM31	= 1	; Waveform Generation Mode Bit 1
                                 .equ	PWM31	= WGM31	; For compatibility
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Comparet Ouput Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 3A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Clock Select 3 bit 0
                                 .equ	CS31	= 1	; Clock Select 3 bit 1
                                 .equ	CS32	= 2	; Clock Select3 bit 2
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	CTC30	= WGM32	; For compatibility
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	CTC31	= WGM33	; For compatibility
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3  Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare for channel C
                                 .equ	FOC3B	= 6	; Force Output Compare for channel B
                                 .equ	FOC3A	= 7	; Force Output Compare for channel A
                                 
                                 ; TCNT3L - Timer/Counter3 Low Byte
                                 .equ	TCN3L0	= 0	; Timer/Counter 3 bit 0
                                 .equ	TCN3L1	= 1	; Timer/Counter 3 bit 1
                                 .equ	TCN3L2	= 2	; Timer/Counter 3 bit 2
                                 .equ	TCN3L3	= 3	; Timer/Counter 3 bit 3
                                 .equ	TCN3L4	= 4	; Timer/Counter 3 bit 4
                                 .equ	TCN3L5	= 5	; Timer/Counter 3 bit 5
                                 .equ	TCN3L6	= 6	; Timer/Counter 3 bit 6
                                 .equ	TCN3L7	= 7	; Timer/Counter 3 bit 7
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDTCSR	= WDTCR	; For compatibility
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDTOE	= WDCE	; For compatibility
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADFR	= 5	; ADC  Free Running Select
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	WDTON	= 0	; Watchdog timer always on
                                 .equ	M103C	= 1	; ATmega103 compatibility mode
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0xffff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 4096
                                 .equ	RAMEND	= 0x10ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 131072
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 4096
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0xf000
                                 .equ	NRWW_STOP_ADDR	= 0xffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0xefff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0xfe00
                                 .equ	SECONDBOOTSTART	= 0xfc00
                                 .equ	THIRDBOOTSTART	= 0xf800
                                 .equ	FOURTHBOOTSTART	= 0xf000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	OC2addr	= 0x0012	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0014	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0016	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0018	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x001a	; Timer/Counter Compare Match B
                                 .equ	OVF1addr	= 0x001c	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x001e	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0020	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0024	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0026	; USART0 Data Register Empty
                                 .equ	UTXC0addr	= 0x0028	; USART0, Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	OC1Caddr	= 0x0030	; Timer/Counter1 Compare Match C
                                 .equ	ICP3addr	= 0x0032	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0034	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0036	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0038	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x003a	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x003c	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x003e	; USART1, Data Register Empty
                                 .equ	UTXC1addr	= 0x0040	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x0042	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0044	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 70	; size in words
                                 
                                 #endif  /* _M128DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;*	This is the final project template for ECE375 Winter 2021
                                 ;***********************************************************
                                 ;*	 Author: Your name here
                                 ;*   Date: Place date here
                                 ;***********************************************************
                                 .include "m128def.inc"			; Include definition file
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega128.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m128def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega128
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega128
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M128DEF_INC_
                                 #endif  /* _M128DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 ;***********************************************************
                                 ;*	Internal Register Definitions and Constants
                                 ;*	(feel free to edit these or add others)
                                 ;***********************************************************
                                 .def	rlo = r0				; Low byte of MUL result
                                 .def	rhi = r1				; High byte of MUL result
                                 .def	zero = r2				; Zero register, set to zero in INIT, useful for calculations
                                 .def	A = r3					; A variable
                                 .def	B = r4					; Another variable
                                 .def	mpr = r16				; Multipurpose register 
                                 .def	oloop = r17				; Outer Loop Counter
                                 .def	iloop = r18				; Inner Loop Counter
                                 .def	index = r19				; Register used to count through loops
                                 .def	count1 = r20			; Register for counting quotient and squares
                                 .def	count2 = r21			; Register for counting quotient and squares
                                 .def	count3 = r22			; Register for counting quotient and squares
                                 .def	count4 = r23			; Register for counting quotient and squares
                                 .def	count5 = r24			; Register for counting quotient and squares
                                 .def	count6 = r25			; Register for counting quotient and squares
                                 
                                 ;***********************************************************
                                 ;*	Data segment variables
                                 ;*	(feel free to edit these or add others)
                                 ;***********************************************************
                                 .dseg
                                 .org	$0100				; data memory allocation for operands
                                 ADD_OP1:
000100                           		.byte 6				; allocate 6 bytes for first operand of ADD
                                 ADD_OP2:
000106                           		.byte 6				; allocate 4 bytes for second operand of ADD
                                 
                                 .org	$0110				; data memory allocation for results
                                 ADD_RESULT:
000110                           		.byte 7				; allocate 7 bytes for ADD result
                                 .org	$0120				; data memory allocation for operands
                                 SUB_OP1:
000120                           		.byte 8				; allocate 8 bytes for first operand of SUB
                                 SUB_OP2:
000128                           		.byte 8				; allocate 8 bytes for second operand of SUB
                                 
                                 .org	$0130				; data memory allocation for results
                                 SUB_RESULT:
000130                           		.byte 9				; allocate 9 bytes for SUB result
                                 
                                 .org	$0140				; data memory allocation for operands
                                 MUL_OP1:
000140                           		.byte 6				; allocate 6 bytes for first operand of MUL
                                 MUL_OP2:
000146                           		.byte 6				; allocate 6 bytes for second operand of MUL
                                 
                                 .org	$0150				; data memory allocation for results
                                 MUL_RESULT:
000150                           		.byte 12			; allocate 12 bytes for MUL result
                                 
                                 .org	$0160				; data memory allocation for operands
                                 DIV_OP1:
000160                           		.byte 8				; allocate 8 bytes for first operand of DIV
                                 DIV_OP2:
000168                           		.byte 8				; allocate 8 bytes for second operand of DIV
                                 
                                 .org	$0170				; data memory allocation for results
                                 DIV_RESULT:
000170                           		.byte 8				; allocate 8 bytes for DIV result
                                 
                                 .org	$0180				; data memory allocation for operands
                                 DIV_VAR_OP1:
000180                           		.byte 8				; allocate 8 bytes for first operand of DIV
                                 DIV_VAR_OP2:
000188                           		.byte 8				; allocate 8 bytes for second operand of DIV
                                 		
                                 .org	$0190				; data memory allocation for operands
                                 SQRT_OP:
000190                           		.byte 6				; allocate 8 bytes for the operand of SQRT
                                 
                                 .org	$01A0				; data memory allocation for results
                                 SQRT_RESULT:
0001a0                           		.byte 6				; allocate 8 bytes for SQRT result
                                 
                                 .org	$01B0				; data memory allocation for results
0001b0                           GM:		.byte 4				; allocate 4 bytes for GM
                                 .org	$01C0				; data memory allocation for results
0001c0                           R:		.byte 2				; allocate 2 bytes for R
                                 .org	$01D0				; data memory allocation for results
0001d0                           VAR:	.byte 6				; allocate 6 bytes for VAR
                                 
                                 
                                 ;***********************************************************
                                 ;*	Start of Code Segment
                                 ;***********************************************************
                                 .cseg							; Beginning of code segment
                                 ;-----------------------------------------------------------
                                 ; Interrupt Vectors
                                 ;-----------------------------------------------------------
                                 .org	$0000					; Beginning of IVs
000000 c045                      		rjmp 	INIT			; Reset interrupt
                                 .org	$0046					; End of Interrupt Vectors
                                 ;-----------------------------------------------------------
                                 ; Program Initialization
                                 ;-----------------------------------------------------------
                                 INIT:	; The initialization routine
000046 2422                      		clr		zero
000047 2744                      		clr		count1
000048 2755                      		clr		count2
000049 2766                      		clr		count3
00004a 2777                      		clr		count4
00004b 2788                      		clr		count5
00004c 2799                      		clr		count6
                                 
                                 ; To do
                                 ; your source code goes here
                                 		; Initialize Stack Pointer
                                 		; TODO					; Init the 2 stack pointer registers
00004d ef0f                      		ldi     mpr, low(RAMEND)
00004e bf0d                              out     SPL, mpr		; Load SPL with the low byte of RAMEND
00004f e100                              ldi     mpr, high(RAMEND)
000050 bf0e                              out     SPH, mpr		; Load SPL with the high byte of RAMEND
                                 
                                 		; This will store the correct GM into program memory
000051 d08e                      		rcall	STORE_GM
000052 d09d                      		rcall	CHECK_GM
                                 
                                 		; This will store the radius into program memory
000053 d0bd                      		rcall	STORE_RADIUS
000054 d0cf                      		rcall	CHECK_RADIUS
                                 		
                                 		; This will store the gm and radius as the division operands
000055 ece0                      		ldi		ZL, low(R)					; Load low byte into ZL register
000056 e0f1                      		ldi		ZH, high(R)					; Load high byte into ZH register
000057 e6a0                      		ldi		XL, low(DIV_OP1)			; Load division operand address into X register, load low byte into X register
000058 e0b1                      		ldi		XH, high(DIV_OP1)			; Load high byte into X register
000059 e038                      		ldi		index, 8
00005a d065                      		rcall	STORE_LOOP
                                 
00005b ebe0                      		ldi		ZL, low(GM)					; Load low byte into ZL register
00005c e0f1                      		ldi		ZH, high(GM)				; Load high byte into ZH register
00005d e6a8                      		ldi		XL, low(DIV_OP2)			; Load division operand address into X register, load low byte into X register
00005e e0b1                      		ldi		XH, high(DIV_OP2)			; Load high byte into X register
00005f e038                      		ldi		index, 8
000060 d05f                      		rcall	STORE_LOOP
                                 
000061 d19b                      		rcall	DIV
                                 
                                 		; Store the division result into the quotient answer space
000062 e7e0                      		ldi		ZL, low(DIV_RESULT)			; Load low byte into ZL register
000063 e0f1                      		ldi		ZH, high(DIV_RESULT)		; Load high byte into ZH register
000064 e0a0                      		ldi		XL, low(Quotient)			; Load quotient address into X register, load low byte into X register
000065 e0be                      		ldi		XH, high(Quotient)			; Load high byte into X register
000066 e033                      		ldi		index, 3
000067 d058                      		rcall	STORE_LOOP
                                 		
                                 		; Use the division result and square root it to get the velocity
000068 e7e0                      		ldi		ZL, low(DIV_RESULT)			; Load low byte into ZL register
000069 e0f1                      		ldi		ZH, high(DIV_RESULT)		; Load high byte into ZH register
00006a e9a0                      		ldi		XL, low(SQRT_OP)			; Load sqrt operand address into X register, load low byte into X register
00006b e0b1                      		ldi		XH, high(SQRT_OP)			; Load high byte into X register
00006c e036                      		ldi		index, 6
00006d d052                      		rcall	STORE_LOOP
                                 
00006e d286                      		rcall	SQRT
00006f d0d5                      		rcall	CHECK_VELOCITY
                                 
                                 		; Store the sqrt result into the velocity answer space
000070 eae0                      		ldi		ZL, low(SQRT_RESULT)		; Load low byte into ZL register
000071 e0f1                      		ldi		ZH, high(SQRT_RESULT)		; Load high byte into ZH register
000072 e0a3                      		ldi		XL, low(Velocity)			; Load Velocity address into X register, load low byte into X register
000073 e0be                      		ldi		XH, high(Velocity)			; Load high byte into X register
000074 e032                      		ldi		index, 2
000075 d04a                      		rcall	STORE_LOOP
                                 
                                 		; This will store the fourty and radius as the multiplication operands
000076 e3ea                      		ldi		ZL, low(FOURTY<<1)			; Load low byte into ZL register
000077 e0f8                      		ldi		ZH, high(FOURTY<<1)			; Load high byte into ZH register
000078 e4a0                      		ldi		XL, low(MUL_OP1)			; Load mult operand address into X register, load low byte into X register
000079 e0b1                      		ldi		XH, high(MUL_OP1)			; Load high byte into X register
00007a e036                      		ldi		index, 6
00007b d04a                      		rcall	STORE_LPM
                                 
00007c ece0                      		ldi		ZL, low(R)					; Load low byte into ZL register
00007d e0f1                      		ldi		ZH, high(R)					; Load high byte into ZH register
00007e e4a6                      		ldi		XL, low(MUL_OP2)			; Load mult operand address into X register, load low byte into X register
00007f e0b1                      		ldi		XH, high(MUL_OP2)			; Load high byte into X register
000080 e036                      		ldi		index, 6
000081 d03e                      		rcall	STORE_LOOP
                                 
000082 d345                      		rcall	MULT
                                 
                                 		; This will store the result and radius as the multiplication operands
000083 e5e0                      		ldi		ZL, low(MUL_RESULT)			; Load low byte into ZL register
000084 e0f1                      		ldi		ZH, high(MUL_RESULT)		; Load high byte into ZH register
000085 e4a0                      		ldi		XL, low(MUL_OP1)			; Load mult operand address into X register, load low byte into X register
000086 e0b1                      		ldi		XH, high(MUL_OP1)			; Load high byte into X register
000087 e036                      		ldi		index, 6
000088 d037                      		rcall	STORE_LOOP
                                 
000089 ece0                      		ldi		ZL, low(R)					; Load low byte into ZL register
00008a e0f1                      		ldi		ZH, high(R)					; Load high byte into ZH register
00008b e4a6                      		ldi		XL, low(MUL_OP2)			; Load mult operand address into X register, load low byte into X register
00008c e0b1                      		ldi		XH, high(MUL_OP2)			; Load high byte into X register
00008d e036                      		ldi		index, 6
00008e d031                      		rcall	STORE_LOOP
                                 
00008f d338                      		rcall	MULT
                                 
                                 		; This will store the result and radius as the multiplication operands
000090 e5e0                      		ldi		ZL, low(MUL_RESULT)			; Load low byte into ZL register
000091 e0f1                      		ldi		ZH, high(MUL_RESULT)		; Load high byte into ZH register
000092 e4a0                      		ldi		XL, low(MUL_OP1)			; Load mult operand address into X register, load low byte into X register
000093 e0b1                      		ldi		XH, high(MUL_OP1)			; Load high byte into X register
000094 e036                      		ldi		index, 6
000095 d02a                      		rcall	STORE_LOOP
                                 
000096 ece0                      		ldi		ZL, low(R)					; Load low byte into ZL register
000097 e0f1                      		ldi		ZH, high(R)					; Load high byte into ZH register
000098 e4a6                      		ldi		XL, low(MUL_OP2)			; Load mult operand address into X register, load low byte into X register
000099 e0b1                      		ldi		XH, high(MUL_OP2)			; Load high byte into X register
00009a e036                      		ldi		index, 6
00009b d024                      		rcall	STORE_LOOP
                                 
00009c d32b                      		rcall	MULT
                                 
                                 		; Store the mul result into the product answer space
00009d e5e0                      		ldi		ZL, low(MUL_RESULT)			; Load low byte into ZL register
00009e e0f1                      		ldi		ZH, high(MUL_RESULT)		; Load high byte into ZH register
00009f e0a5                      		ldi		XL, low(Product)			; Load Velocity address into X register, load low byte into X register
0000a0 e0be                      		ldi		XH, high(Product)			; Load high byte into X register
0000a1 e037                      		ldi		index, 7
0000a2 d01d                      		rcall	STORE_LOOP
                                 
                                 		; This will store the result and GM as the division operands
0000a3 ebe0                      		ldi		ZL, low(GM)					; Load low byte into ZL register
0000a4 e0f1                      		ldi		ZH, high(GM)				; Load high byte into ZH register
0000a5 e6a0                      		ldi		XL, low(DIV_OP1)			; Load division operand address into X register, load low byte into X register
0000a6 e0b1                      		ldi		XH, high(DIV_OP1)			; Load high byte into X register
0000a7 e038                      		ldi		index, 8
0000a8 d017                      		rcall	STORE_LOOP
                                 
0000a9 e5e0                      		ldi		ZL, low(MUL_RESULT)			; Load low byte into ZL register
0000aa e0f1                      		ldi		ZH, high(MUL_RESULT)		; Load high byte into ZH register
0000ab e6a8                      		ldi		XL, low(DIV_OP2)			; Load division operand address into X register, load low byte into X register
0000ac e0b1                      		ldi		XH, high(DIV_OP2)			; Load high byte into X register
0000ad e038                      		ldi		index, 8
0000ae d011                      		rcall	STORE_LOOP
                                 
0000af d14d                      		rcall	DIV
                                 
                                 		; This will store the result as the sqrt operand
0000b0 e7e0                      		ldi		ZL, low(DIV_RESULT)			; Load low byte into ZL register
0000b1 e0f1                      		ldi		ZH, high(DIV_RESULT)		; Load high byte into ZH register
0000b2 e9a0                      		ldi		XL, low(SQRT_OP)			; Load sqrt operand address into X register, load low byte into X register
0000b3 e0b1                      		ldi		XH, high(SQRT_OP)			; Load high byte into X register
0000b4 e036                      		ldi		index, 6
0000b5 d00a                      		rcall	STORE_LOOP
                                 		
0000b6 d23e                      		rcall	SQRT
0000b7 d09f                      		rcall	CHECK_PERIOD
                                 
                                 		; Store the sqrt result into the Period answer space
0000b8 eae0                      		ldi		ZL, low(SQRT_RESULT)		; Load low byte into ZL register
0000b9 e0f1                      		ldi		ZH, high(SQRT_RESULT)		; Load high byte into ZH register
0000ba e0ac                      		ldi		XL, low(Period)				; Load Velocity address into X register, load low byte into X register
0000bb e0be                      		ldi		XH, high(Period)			; Load high byte into X register
0000bc e033                      		ldi		index, 3
0000bd d002                      		rcall	STORE_LOOP
                                 
                                 	
0000be 940c 0441                 		jmp	Grading				; this should be the very last instruction of your code
                                 
                                 ;-----------------------------------------------------------
                                 ;	Procedures and Subroutines
                                 ;-----------------------------------------------------------
                                 ; your code can go here as well
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: STORE_LOOP
                                 ; Desc: Loads Z values into where X register is pointing
                                 ;-----------------------------------------------------------
                                 STORE_LOOP:
0000c0 9101                      		ld		mpr, Z+
0000c1 930d                      		st		X+, mpr
0000c2 953a                      		dec		index
0000c3 1532                      		cp		index, zero
0000c4 f7d9                      		brne	STORE_LOOP
                                 
0000c5 9508                      		ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: STORE_LPM
                                 ; Desc: Loads Z values into where X register is pointing
                                 ;-----------------------------------------------------------
                                 STORE_LPM:
0000c6 9105                      		lpm		mpr, Z+
0000c7 930d                      		st		X+, mpr
0000c8 953a                      		dec		index
0000c9 1532                      		cp		index, zero
0000ca f7d9                      		brne	STORE_LPM
                                 
0000cb 9508                      		ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: CLR_LOOP
                                 ; Desc: Clears program memory for each index space
                                 ;-----------------------------------------------------------
                                 CLR_LOOP:
0000cc 922d                      		st		X+, zero		; Set data memory to 0 and inc X
0000cd 953a                      		dec		index
0000ce 1532                      		cp		index, zero
0000cf f7e1                      		brne	CLR_LOOP
                                 
0000d0 9508                      		ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: STORE_COUNTERS
                                 ; Desc: Stores the count values into memory
                                 ;-----------------------------------------------------------
                                 STORE_COUNTERS:
0000d1 93ed                      		st		X+, ZL
0000d2 93fd                      		st		X+, ZH
0000d3 2fe6                      		mov		ZL, count3					; Load low byte into ZL register
0000d4 2ff7                      		mov		ZH, count4					; Load high byte into ZH register
0000d5 93ed                      		st		X+, ZL
0000d6 93fd                      		st		X+, ZH
0000d7 2fe8                      		mov		ZL, count5					; Load low byte into ZL register
0000d8 2ff9                      		mov		ZH, count6					; Load high byte into ZH register
0000d9 93ed                      		st		X+, ZL
0000da 93fd                      		st		X+, ZH
0000db 2de2                      		mov		ZL, zero					; Load low byte into ZL register
0000dc 2df2                      		mov		ZH, zero					; Load high byte into ZH register
0000dd 93ed                      		st		X+, ZL
0000de 93fd                      		st		X+, ZH
                                 
0000df 9508                      		ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: STORE_GM
                                 ; Desc: Stores GM value into program memory
                                 ;-----------------------------------------------------------
                                 STORE_GM:
0000e0 e0f8                      		ldi		ZH, high(SelectedPlanet<<1)
0000e1 e8e8                      		ldi		ZL, low(SelectedPlanet<<1)
0000e2 9104                      		lpm		mpr, Z
0000e3 e0a4                      		ldi		XL, 4
0000e4 9f0a                      		mul		mpr, XL				; this will set rlo to the value to shift over to find the selected GM
0000e5 e0f8                      		ldi		ZH, high(PlanetInfo<<1)
0000e6 e80a                      		ldi		mpr, low(PlanetInfo<<1)
0000e7 0d00                      		add		mpr, rlo
0000e8 f408                      		brcc	CONTINUE
0000e9 95f3                      		inc		ZH
                                 
                                 CONTINUE:
0000ea 2fe0                      		mov		ZL, mpr
0000eb eba0                      		ldi		XL, low(GM)
0000ec e0b1                      		ldi		XH, high(GM)
0000ed e034                      		ldi		index, 4
0000ee dfd7                      		rcall	STORE_LPM
                                 
0000ef 9508                      		ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: CHECK_GM
                                 ; Desc: Checks if GM is > 1000 by seeing if GM-1000 is positive or 0
                                 ;-----------------------------------------------------------
                                 CHECK_GM:
0000f0 e7e2                      		ldi		ZL, low(THOUSANDX<<1)		; Load low byte into ZL register
0000f1 e0f8                      		ldi		ZH, high(THOUSANDX<<1)		; Load high byte into ZH register
0000f2 e2a0                      		ldi		XL, low(SUB_OP1)			; Load subtraction operand address into X register, load low byte into X register
0000f3 e0b1                      		ldi		XH, high(SUB_OP1)			; Load high byte into X register
0000f4 e038                      		ldi		index, 8
0000f5 dfd0                      		rcall	STORE_LPM
                                 
0000f6 ebe0                      		ldi		ZL, low(GM)					; Load low byte into ZL register
0000f7 e0f1                      		ldi		ZH, high(GM)				; Load high byte into ZH register
0000f8 e2a8                      		ldi		XL, low(SUB_OP2)			; Load subtraction operand address into X register, load low byte into X register
0000f9 e0b1                      		ldi		XH, high(SUB_OP2)			; Load high byte into X register
0000fa e038                      		ldi		index, 8
0000fb dfc4                      		rcall	STORE_LOOP
                                 
0000fc d24f                      		rcall	SUBT
                                 		
0000fd e0f1                      		ldi		ZH, high(SUB_RESULT)
0000fe e3e0                      		ldi		ZL, low(SUB_RESULT)
0000ff e034                      		ldi		index, 4
                                 		GM_CHECK_ZERO:
000100 9101                      				ld		mpr, Z+
000101 1502                      				cp		mpr, zero
000102 f459                      				brne	GM_CHECK_NEG
000103 953a                      				dec		index
000104 1532                      				cp		index, zero
000105 f7d1                      				brne	GM_CHECK_ZERO
                                 GM_BAD:
                                 		; Store -1 into the period answer space
000106 e6e2                      		ldi		ZL, low(NEG_ONE<<1)			; Load low byte into ZL register
000107 e0f8                      		ldi		ZH, high(NEG_ONE<<1)		; Load high byte into ZH register
000108 e0ac                      		ldi		XL, low(Period)				; Load Period address into X register, load low byte into X register
000109 e0be                      		ldi		XH, high(Period)			; Load high byte into X register
00010a e033                      		ldi		index, 3
00010b dfba                      		rcall	STORE_LPM
                                 
00010c 940c 0441                 		jmp		Grading
                                 
                                 GM_CHECK_NEG:
00010e d060                      		rcall	LOAD_CARRY
00010f f7b1                      		brne	GM_BAD
                                 
                                 GM_GOOD:
000110 9508                      		ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: STORE_RADIUS
                                 ; Desc: Stores orbital radius into program memory
                                 ;-----------------------------------------------------------
                                 STORE_RADIUS:
000111 e8e6                      		ldi		ZL, low(OrbitalRadius<<1)
000112 e8a8                      		ldi		XL, low(SelectedPlanet<<1)
000113 e002                      		ldi		mpr, 2
000114 0fe0                      		add		ZL, mpr
000115 17ae                      		cp		XL, ZL
000116 f031                      		breq	NORMAL_RADIUS
                                 
000117 e8e6                      		ldi		ZL, low(OrbitalRadius<<1)
000118 e0f8                      		ldi		ZH, high(OrbitalRadius<<1)
000119 eca0                      		ldi		XL, low(R)
00011a e0b1                      		ldi		XH, high(R)
00011b e033                      		ldi		index, 3
00011c dfa9                      		rcall	STORE_LPM
                                 
                                 NORMAL_RADIUS:
00011d e8e6                      		ldi		ZL, low(OrbitalRadius<<1)
00011e e0f8                      		ldi		ZH, high(OrbitalRadius<<1)
00011f eca0                      		ldi		XL, low(R)
000120 e0b1                      		ldi		XH, high(R)
000121 e032                      		ldi		index, 2
000122 dfa3                      		rcall	STORE_LPM
                                 
000123 9508                      		ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: CHECK_RADIUS
                                 ; Desc: Checks if R is > 1000 by seeing if R-1000 is positive or 0
                                 ;-----------------------------------------------------------
                                 CHECK_RADIUS:
000124 e7e2                      		ldi		ZL, low(THOUSANDX<<1)		; Load low byte into ZL register
000125 e0f8                      		ldi		ZH, high(THOUSANDX<<1)		; Load high byte into ZH register
000126 e2a0                      		ldi		XL, low(SUB_OP1)			; Load subtraction operand address into X register, load low byte into X register
000127 e0b1                      		ldi		XH, high(SUB_OP1)			; Load high byte into X register
000128 e038                      		ldi		index, 8
000129 df9c                      		rcall	STORE_LPM
                                 
00012a ece0                      		ldi		ZL, low(R)					; Load low byte into ZL register
00012b e0f1                      		ldi		ZH, high(R)					; Load high byte into ZH register
00012c e2a8                      		ldi		XL, low(SUB_OP2)			; Load subtraction operand address into X register, load low byte into X register
00012d e0b1                      		ldi		XH, high(SUB_OP2)			; Load high byte into X register
00012e e038                      		ldi		index, 8
00012f df90                      		rcall	STORE_LOOP
                                 
000130 d21b                      		rcall	SUBT
                                 		
000131 e0f1                      		ldi		ZH, high(SUB_RESULT)
000132 e3e0                      		ldi		ZL, low(SUB_RESULT)
000133 e034                      		ldi		index, 4
                                 		RADIUS_CHECK_ZERO:
000134 9101                      				ld		mpr, Z+
000135 1502                      				cp		mpr, zero
000136 f459                      				brne	RADIUS_CHECK_NEG
000137 953a                      				dec		index
000138 1532                      				cp		index, zero
000139 f7d1                      				brne	RADIUS_CHECK_ZERO
                                 RADIUS_BAD:
                                 		; Store -1 into the period answer space
00013a e6e2                      		ldi		ZL, low(NEG_ONE<<1)			; Load low byte into ZL register
00013b e0f8                      		ldi		ZH, high(NEG_ONE<<1)		; Load high byte into ZH register
00013c e0a3                      		ldi		XL, low(Velocity)			; Load Velocity address into X register, load low byte into X register
00013d e0be                      		ldi		XH, high(Velocity)			; Load high byte into X register
00013e e032                      		ldi		index, 2
00013f df86                      		rcall	STORE_LPM
                                 
000140 940c 0441                 		jmp		Grading
                                 
                                 RADIUS_CHECK_NEG:
000142 d02c                      		rcall	LOAD_CARRY
000143 f7b1                      		brne	RADIUS_BAD
                                 
                                 RADIUS_GOOD:
000144 9508                      		ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: CHECK_VELOCITY
                                 ; Desc: If the velocity is 0 then return negative -2
                                 ;-----------------------------------------------------------
                                 CHECK_VELOCITY:
000145 e0f1                      		ldi		ZH, high(SQRT_RESULT)
000146 eae0                      		ldi		ZL, low(SQRT_RESULT)
000147 e036                      		ldi		index, 6
                                 		VELOCITY_CHECK_ZERO:
000148 9101                      				ld		mpr, Z+
000149 1502                      				cp		mpr, zero
00014a f459                      				brne	VELOCITY_GOOD
00014b 953a                      				dec		index
00014c 1532                      				cp		index, zero
00014d f7d1                      				brne	VELOCITY_CHECK_ZERO
                                 		; Store -2 into the period answer space
00014e e6ea                      		ldi		ZL, low(NEG_TWO<<1)			; Load low byte into ZL register
00014f e0f8                      		ldi		ZH, high(NEG_TWO<<1)		; Load high byte into ZH register
000150 e0a3                      		ldi		XL, low(Velocity)			; Load Velocity address into X register, load low byte into X register
000151 e0be                      		ldi		XH, high(Velocity)			; Load high byte into X register
000152 e032                      		ldi		index, 2
000153 df72                      		rcall	STORE_LPM
                                 
000154 940c 0441                 		jmp		Grading
                                 
000156 9508                      VELOCITY_GOOD:	ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: CHECK_PERIOD
                                 ; Desc: If the period is less than 25 then return negative -2
                                 ;-----------------------------------------------------------
                                 CHECK_PERIOD:
000157 e7ea                      		ldi		ZL, low(TWENTYFIVE<<1)		; Load low byte into ZL register
000158 e0f8                      		ldi		ZH, high(TWENTYFIVE<<1)		; Load high byte into ZH register
000159 e2a0                      		ldi		XL, low(SUB_OP1)			; Load subtraction operand address into X register, load low byte into X register
00015a e0b1                      		ldi		XH, high(SUB_OP1)			; Load high byte into X register
00015b e038                      		ldi		index, 8
00015c df69                      		rcall	STORE_LPM
                                 
00015d eae0                      		ldi		ZL, low(SQRT_RESULT)		; Load low byte into ZL register
00015e e0f1                      		ldi		ZH, high(SQRT_RESULT)		; Load high byte into ZH register
00015f e2a8                      		ldi		XL, low(SUB_OP2)			; Load subtraction operand address into X register, load low byte into X register
000160 e0b1                      		ldi		XH, high(SUB_OP2)			; Load high byte into X register
000161 e038                      		ldi		index, 8
000162 df5d                      		rcall	STORE_LOOP
                                 
000163 d1e8                      		rcall	SUBT
                                 		
000164 d00a                      		rcall	LOAD_CARRY
000165 f041                      		breq	PERIOD_GOOD
                                 
                                 		; Store -2 into the period answer space
000166 e6ea                      		ldi		ZL, low(NEG_TWO<<1)			; Load low byte into ZL register
000167 e0f8                      		ldi		ZH, high(NEG_TWO<<1)		; Load high byte into ZH register
000168 e0ac                      		ldi		XL, low(Period)				; Load Period address into X register, load low byte into X register
000169 e0be                      		ldi		XH, high(Period)			; Load high byte into X register
00016a e033                      		ldi		index, 3
00016b df5a                      		rcall	STORE_LPM
                                 
00016c 940c 0441                 		jmp		Grading
                                 
00016e 9508                      PERIOD_GOOD:	ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: LOAD_CARRY
                                 ; Desc: Loads in the carry value to compare to zero
                                 ;-----------------------------------------------------------
                                 LOAD_CARRY:
00016f e300                      		ldi		mpr, low(SUB_RESULT)
000170 e0a8                      		ldi		XL, 8
000171 0f0a                      		add		mpr, XL
000172 2fe0                      		mov		ZL, mpr
000173 e0f1                      		ldi		ZH, high(SUB_RESULT)
000174 8100                      		ld		mpr, Z
000175 1502                      		cp		mpr, zero
                                 
000176 9508                      		ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: SUB_VAR
                                 ; Desc: Subtracts var from count
                                 ;-----------------------------------------------------------
                                 SUB_VAR:
000177 e2a0                      		ldi		XL, low(SUB_OP1)			; Load sub operand address into X register, load low byte into X register
000178 e0b1                      		ldi		XH, high(SUB_OP1)			; Load high byte into X register
000179 e036                      		ldi		index, 6
00017a df45                      		rcall	STORE_LOOP
                                 
00017b 2fe4                      		mov		ZL, count1					; Load low byte into ZL register
00017c 2ff5                      		mov		ZH, count2					; Load high byte into ZH register
00017d e2a8                      		ldi		XL, low(SUB_OP2)			; Load sub operand address into X register, load low byte into X register
00017e e0b1                      		ldi		XH, high(SUB_OP2)			; Load high byte into X register
00017f df51                      		rcall	STORE_COUNTERS
                                 
000180 d1cb                      		rcall	SUBT
                                 		
000181 e3e0                      		ldi		ZL, low(SUB_RESULT)				; Load low byte into ZL register
000182 e0f1                      		ldi		ZH, high(SUB_RESULT)			; Load high byte into ZH register
000183 9101                      		ld		mpr, Z+
000184 2f40                      		mov		count1, mpr
000185 9101                      		ld		mpr, Z+
000186 2f50                      		mov		count2, mpr
000187 9101                      		ld		mpr, Z+
000188 2f60                      		mov		count3, mpr
000189 9101                      		ld		mpr, Z+
00018a 2f70                      		mov		count4, mpr
00018b 9101                      		ld		mpr, Z+
00018c 2f80                      		mov		count5, mpr
00018d 9101                      		ld		mpr, Z+
00018e 2f90                      		mov		count6, mpr
                                 		
00018f ede0                      		ldi		ZL, low(VAR)
000190 e0f1                      		ldi		ZH, high(VAR)
000191 e2a0                      		ldi		XL, low(SUB_OP1)			; Load sub operand address into X register, load low byte into X register
000192 e0b1                      		ldi		XH, high(SUB_OP1)			; Load high byte into X register
000193 e038                      		ldi		index, 8
000194 df2b                      		rcall	STORE_LOOP
                                 
000195 e7e0                      		ldi		ZL, low(DIV_RESULT)			; Load low byte into ZL register
000196 e0f1                      		ldi		ZH, high(DIV_RESULT)		; Load high byte into ZH register
000197 e2a8                      		ldi		XL, low(SUB_OP2)			; Load sub operand address into X register, load low byte into X register
000198 e0b1                      		ldi		XH, high(SUB_OP2)			; Load high byte into X register
000199 e038                      		ldi		index, 8
00019a df25                      		rcall	STORE_LOOP
                                 
00019b d1b0                      		rcall	SUBT
                                 
00019c e3e0                      		ldi		ZL, low(SUB_RESULT)			; Load low byte into ZL register
00019d e0f1                      		ldi		ZH, high(SUB_RESULT)		; Load high byte into ZH register
00019e e7a0                      		ldi		XL, low(DIV_RESULT)			; Load div result operand address into X register, load low byte into X register
00019f e0b1                      		ldi		XH, high(DIV_RESULT)		; Load high byte into X register
0001a0 e038                      		ldi		index, 8
0001a1 df1e                      		rcall	STORE_LOOP
                                 
0001a2 9508                      		ret
                                 ;-----------------------------------------------------------
                                 ; Func: ADD_VAR
                                 ; Desc: Adds variable amount to count
                                 ;-----------------------------------------------------------
                                 ADD_VAR:
0001a3 e0a0                      		ldi		XL, low(ADD_OP1)			; Load add operand address into X register, load low byte into X register
0001a4 e0b1                      		ldi		XH, high(ADD_OP1)			; Load high byte into X register
0001a5 e036                      		ldi		index, 6
0001a6 df19                      		rcall	STORE_LOOP
                                 
0001a7 2fe4                      		mov		ZL, count1					; Load low byte into ZL register
0001a8 2ff5                      		mov		ZH, count2					; Load high byte into ZH register
0001a9 e0a6                      		ldi		XL, low(ADD_OP2)			; Load sub operand address into X register, load low byte into X register
0001aa e0b1                      		ldi		XH, high(ADD_OP2)			; Load high byte into X register
0001ab df25                      		rcall	STORE_COUNTERS
                                 
0001ac d1e1                      		rcall	ADD_
                                 
0001ad e1e0                      		ldi		ZL, low(ADD_RESULT)				; Load low byte into ZL register
0001ae e0f1                      		ldi		ZH, high(ADD_RESULT)			; Load high byte into ZH register
0001af 9101                      		ld		mpr, Z+
0001b0 2f40                      		mov		count1, mpr
0001b1 9101                      		ld		mpr, Z+
0001b2 2f50                      		mov		count2, mpr
0001b3 9101                      		ld		mpr, Z+
0001b4 2f60                      		mov		count3, mpr
0001b5 9101                      		ld		mpr, Z+
0001b6 2f70                      		mov		count4, mpr
0001b7 9101                      		ld		mpr, Z+
0001b8 2f80                      		mov		count5, mpr
0001b9 9101                      		ld		mpr, Z+
0001ba 2f90                      		mov		count6, mpr
                                 
                                 		; Update temp_count
0001bb ede0                      		ldi		ZL, low(VAR)
0001bc e0f1                      		ldi		ZH, high(VAR)
0001bd e0a0                      		ldi		XL, low(ADD_OP1)			; Load add operand address into X register, load low byte into X register
0001be e0b1                      		ldi		XH, high(ADD_OP1)			; Load high byte into X register
0001bf e036                      		ldi		index, 6
0001c0 deff                      		rcall	STORE_LOOP
                                 
0001c1 e7e0                      		ldi		ZL, low(DIV_RESULT)			; Load low byte into ZL register
0001c2 e0f1                      		ldi		ZH, high(DIV_RESULT)		; Load high byte into ZH register
0001c3 e0a6                      		ldi		XL, low(ADD_OP2)			; Load add operand address into X register, load low byte into X register
0001c4 e0b1                      		ldi		XH, high(ADD_OP2)			; Load high byte into X register
0001c5 e036                      		ldi		index, 6
0001c6 def9                      		rcall	STORE_LOOP
                                 
0001c7 d1c6                      		rcall	ADD_
                                 
0001c8 e1e0                      		ldi		ZL, low(ADD_RESULT)			; Load low byte into ZL register
0001c9 e0f1                      		ldi		ZH, high(ADD_RESULT)		; Load high byte into ZH register
0001ca e7a0                      		ldi		XL, low(DIV_RESULT)			; Load div result operand address into X register, load low byte into X register
0001cb e0b1                      		ldi		XH, high(DIV_RESULT)		; Load high byte into X register
0001cc e038                      		ldi		index, 8
0001cd def2                      		rcall	STORE_LOOP
                                 
0001ce 9508                      		ret
                                 		
                                 ;-----------------------------------------------------------
                                 ; Func: SUBCOUNT
                                 ; Desc: Subtracts the count from DIV_OP 2
                                 ;-----------------------------------------------------------
                                 SUB_COUNT:
0001cf 1542                      		cp		count1, zero
0001d0 f459                      		brbc	1, COUNT_NOT_ZERO
0001d1 1552                      		cp		count2, zero
0001d2 f449                      		brbc	1, COUNT_NOT_ZERO
0001d3 1562                      		cp		count3, zero
0001d4 f439                      		brbc	1, COUNT_NOT_ZERO
0001d5 1572                      		cp		count4, zero
0001d6 f429                      		brbc	1, COUNT_NOT_ZERO
0001d7 1582                      		cp		count5, zero
0001d8 f419                      		brbc	1, COUNT_NOT_ZERO
0001d9 1592                      		cp		count6, zero
0001da f409                      		brbc	1, COUNT_NOT_ZERO
0001db 9508                      		ret
                                 COUNT_NOT_ZERO:
0001dc e7e0                      		ldi		ZL, low(DIV_RESULT)			; Load low byte into ZL register
0001dd e0f1                      		ldi		ZH, high(DIV_RESULT)		; Load high byte into ZH register
0001de e4a0                      		ldi		XL, low(MUL_OP1)			; Load mult operand address into X register, load low byte into X register
0001df e0b1                      		ldi		XH, high(MUL_OP1)			; Load high byte into X register
0001e0 e036                      		ldi		index, 6
0001e1 dede                      		rcall	STORE_LOOP
                                 
0001e2 e6e0                      		ldi		ZL, low(DIV_OP1)			; Load low byte into ZL register
0001e3 e0f1                      		ldi		ZH, high(DIV_OP1)			; Load high byte into ZH register
0001e4 e4a6                      		ldi		XL, low(MUL_OP2)			; Load mult operand address into X register, load low byte into X register
0001e5 e0b1                      		ldi		XH, high(MUL_OP2)			; Load high byte into X register
0001e6 e036                      		ldi		index, 6
0001e7 ded8                      		rcall	STORE_LOOP
                                 
0001e8 d1df                      		rcall	MULT
                                 
0001e9 e5e0                      		ldi		ZL, low(MUL_RESULT)			; Load low byte into ZL register
0001ea e0f1                      		ldi		ZH, high(MUL_RESULT)		; Load high byte into ZH register
0001eb e2a0                      		ldi		XL, low(SUB_OP1)			; Load subtraction operand address into X register, load low byte into X register
0001ec e0b1                      		ldi		XH, high(SUB_OP1)			; Load high byte into X register
0001ed e038                      		ldi		index, 8
0001ee ded1                      		rcall	STORE_LOOP
                                 
0001ef e6e8                      		ldi		ZL, low(DIV_OP2)			; Load low byte into ZL register
0001f0 e0f1                      		ldi		ZH, high(DIV_OP2)			; Load high byte into ZH register
0001f1 e2a8                      		ldi		XL, low(SUB_OP2)			; Load subtraction operand address into X register, load low byte into X register
0001f2 e0b1                      		ldi		XH, high(SUB_OP2)			; Load high byte into X register
0001f3 e038                      		ldi		index, 8
0001f4 decb                      		rcall	STORE_LOOP
                                 
0001f5 d156                      		rcall	SUBT
                                 		
0001f6 e3e0                      		ldi		ZL, low(SUB_RESULT)			; Load low byte into ZL register
0001f7 e0f1                      		ldi		ZH, high(SUB_RESULT)		; Load high byte into ZH register
0001f8 e6a8                      		ldi		XL, low(DIV_OP2)			; Load div op2 operand address into X register, load low byte into X register
0001f9 e0b1                      		ldi		XH, high(DIV_OP2)			; Load high byte into X register
0001fa e038                      		ldi		index, 8
0001fb dec4                      		rcall	STORE_LOOP
                                 
0001fc 9508                      		ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: DIV
                                 ; Desc: Divides two 64-bit numbers and generates a 48-bit
                                 ;		result.
                                 ;-----------------------------------------------------------
                                 DIV:
0001fd 922f                      		push	zero					; Save zero register
0001fe 93bf                      		push	XH						; Save XH-ptr
0001ff 93af                      		push	XL						; Save XL-ptr
000200 93df                      		push	YH						; Save YH-ptr
000201 93cf                      		push	YL						; Save YL-ptr
000202 93ff                      		push	ZH						; Save ZH-ptr
000203 93ef                      		push	ZL						; Save ZL-ptr
000204 930f                      		push	mpr						; Save mpr
                                 
000205 2422                      		clr		zero					; Maintain zero semantics
000206 e7a0                      		ldi		XL, low(DIV_RESULT)		; Clear low byte of result data memory
000207 e0b1                      		ldi		XH, high(DIV_RESULT)	; Clear high byte of result data memory
000208 e038                      		ldi		index, 8
000209 dec2                      		rcall	CLR_LOOP
                                 
                                 		; now we need to load a billion into VAR - but only if radius is less than 1 million
00020a e5ea                      		ldi		ZL, low(BIL<<1)				; Load low byte into ZL register
00020b e0f8                      		ldi		ZH, high(BIL<<1)			; Load high byte into ZH register
00020c eda0                      		ldi		XL, low(VAR)				; Load low byte into X register
00020d e0b1                      		ldi		XH, high(VAR)				; Load high byte into X register
00020e e036                      		ldi		index, 6
00020f deb6                      		rcall	STORE_LPM
                                 
000210 d081                      		rcall	DIV_VAR
                                 		
000211 dfbd                      		rcall	SUB_COUNT
                                 
                                 		; now we need to load a million into VAR 
000212 e5e2                      		ldi		ZL, low(MIL<<1)				; Load low byte into ZL register
000213 e0f8                      		ldi		ZH, high(MIL<<1)			; Load high byte into ZH register
000214 eda0                      		ldi		XL, low(VAR)				; Load low byte into X register
000215 e0b1                      		ldi		XH, high(VAR)				; Load high byte into X register
000216 e036                      		ldi		index, 6
000217 deae                      		rcall	STORE_LPM
                                 
000218 d079                      		rcall	DIV_VAR
                                 
000219 dfb5                      		rcall	SUB_COUNT
                                 
                                 		; now we need to load 1000 into VAR 
00021a e4ea                      		ldi		ZL, low(THOUSAND<<1)		; Load low byte into ZL register
00021b e0f8                      		ldi		ZH, high(THOUSAND<<1)		; Load high byte into ZH register
00021c eda0                      		ldi		XL, low(VAR)				; Load var operand address into X register, load low byte into X register
00021d e0b1                      		ldi		XH, high(VAR)				; Load high byte into X register
00021e e036                      		ldi		index, 6
00021f dea6                      		rcall	STORE_LPM
                                 
000220 d071                      		rcall	DIV_VAR
                                 		
000221 dfad                      		rcall	SUB_COUNT
                                 		
                                 		; now we need to load 1 into VAR 
000222 e2ea                      		ldi		ZL, low(ONE<<1)				; Load low byte into ZL register
000223 e0f8                      		ldi		ZH, high(ONE<<1)			; Load high byte into ZH register
000224 eda0                      		ldi		XL, low(VAR)				; Load var operand address into X register, load low byte into X register
000225 e0b1                      		ldi		XH, high(VAR)				; Load high byte into X register
000226 e036                      		ldi		index, 6
000227 de9e                      		rcall	STORE_LPM
                                 
                                 		; This will store the divide operands to subtract operands
000228 e6e0                      		ldi		ZL, low(DIV_OP1)			; Load low byte into ZL register
000229 e0f1                      		ldi		ZH, high(DIV_OP1)			; Load high byte into ZH register
00022a e2a0                      		ldi		XL, low(SUB_OP1)			; Load sub operand address into X register, load low byte into X register
00022b e0b1                      		ldi		XH, high(SUB_OP1)			; Load high byte into X register
00022c e038                      		ldi		index, 8
00022d de92                      		rcall	STORE_LOOP
                                 
00022e e6e8                      		ldi		ZL, low(DIV_OP2)			; Load low byte into ZL register
00022f e0f1                      		ldi		ZH, high(DIV_OP2)			; Load high byte into ZH register
000230 e2a8                      		ldi		XL, low(SUB_OP2)			; Load sub operand address into X register, load low byte into X register
000231 e0b1                      		ldi		XH, high(SUB_OP2)			; Load high byte into X register
000232 e038                      		ldi		index, 8
000233 de8c                      		rcall	STORE_LOOP
                                 
000234 d117                      		rcall	SUBT
                                 		
                                 		; Here I exit if the carry value is 1 (meaning a negative result)
000235 df39                      		rcall	LOAD_CARRY
000236 f009                      		breq	ADD_INIT
000237 c046                      		rjmp	EXIT
                                 
                                 		ADD_INIT:
000238 ede0                      				ldi		ZL, low(VAR)				; Load low byte into ZL register
000239 e0f1                      				ldi		ZH, high(VAR)				; Load high byte into ZH register
00023a df68                      				rcall	ADD_VAR
                                 
                                 		DIV_LOOP:
00023b ede0                      				ldi		ZL, low(VAR)				; Load low byte into ZL register
00023c e0f1                      				ldi		ZH, high(VAR)				; Load high byte into ZH register
00023d df65                      				rcall	ADD_VAR
                                 
                                 		CONT:
00023e e6e0                      				ldi		ZL, low(DIV_OP1)			; Load low byte into ZL register
00023f e0f1                      				ldi		ZH, high(DIV_OP1)			; Load high byte into ZH register
000240 e2a0                      				ldi		XL, low(SUB_OP1)			; Load subtraction operand address into X register, load low byte into X register
000241 e0b1                      				ldi		XH, high(SUB_OP1)			; Load high byte into X register
000242 e038                      				ldi		index, 8
000243 de7c                      				rcall	STORE_LOOP
                                 
000244 e3e0                      				ldi		ZL, low(SUB_RESULT)			; Load low byte into ZL register
000245 e0f1                      				ldi		ZH, high(SUB_RESULT)		; Load high byte into ZH register
000246 e2a8                      				ldi		XL, low(SUB_OP2)			; Load subtraction operand address into X register, load low byte into X register
000247 e0b1                      				ldi		XH, high(SUB_OP2)			; Load high byte into X register
000248 e038                      				ldi		index, 8
000249 de76                      				rcall	STORE_LOOP
                                 
00024a d101                      				rcall	SUBT
                                 													; Here we compare the carry bit to check if the value is negative
00024b e0f1                      				ldi		ZH, high(SUB_RESULT)
00024c e3e0                      				ldi		ZL, low(SUB_RESULT)
00024d e038                      				ldi		index, 8
                                 				CHECK_ZERO:
00024e 9101                      						ld		mpr, Z+
00024f 1502                      						cp		mpr, zero
000250 f431                      						brne	CHECK_CARRY
000251 953a                      						dec		index
000252 1532                      						cp		index, zero
000253 f7d1                      						brne	CHECK_ZERO
000254 9101                      						ld		mpr, Z+
000255 1502                      						cp		mpr, zero
000256 c027                      						rjmp	EXIT
                                 		CHECK_CARRY:
000257 df17                      				rcall	LOAD_CARRY
000258 f311                      				breq	DIV_LOOP
                                 
                                 		; now we need to double the remainder in order to compare it to op1, if less than, decrement the count
000259 e3e2                      		ldi		ZL, low(TWO<<1)				; Load low byte into ZL register
00025a e0f8                      		ldi		ZH, high(TWO<<1)			; Load high byte into ZH register
00025b e4a0                      		ldi		XL, low(MUL_OP1)			; Load multiplication operand address into X register, load low byte into X register
00025c e0b1                      		ldi		XH, high(MUL_OP1)			; Load high byte into X register
00025d e036                      		ldi		index, 6
00025e de67                      		rcall	STORE_LPM
                                 
00025f e2e8                      		ldi		ZL, low(SUB_OP2)			; Load low byte into ZL register
000260 e0f1                      		ldi		ZH, high(SUB_OP2)			; Load high byte into ZH register
000261 e4a6                      		ldi		XL, low(MUL_OP2)			; Load multiplication operand address into X register, load low byte into X register
000262 e0b1                      		ldi		XH, high(MUL_OP2)			; Load high byte into X register
000263 e036                      		ldi		index, 6
000264 de5b                      		rcall	STORE_LOOP
                                 
000265 d162                      		rcall	MULT
                                 
                                 		; compare it to op2 by subtracting op 1
000266 e6e0                      		ldi		ZL, low(DIV_OP1)			; Load low byte into ZL register
000267 e0f1                      		ldi		ZH, high(DIV_OP1)			; Load high byte into ZH register
000268 e2a0                      		ldi		XL, low(SUB_OP1)			; Load sub operand address into X register, load low byte into X register
000269 e0b1                      		ldi		XH, high(SUB_OP1)			; Load high byte into X register
00026a e038                      		ldi		index, 8
00026b de54                      		rcall	STORE_LOOP
                                 
00026c e5e0                      		ldi		ZL, low(MUL_RESULT)		; Load low byte into ZL register
00026d e0f1                      		ldi		ZH, high(MUL_RESULT)		; Load high byte into ZH register
00026e e2a8                      		ldi		XL, low(SUB_OP2)			; Load sub operand address into X register, load low byte into X register
00026f e0b1                      		ldi		XH, high(SUB_OP2)			; Load high byte into X register
000270 e038                      		ldi		index, 8
000271 de4e                      		rcall	STORE_LOOP
                                 
000272 d0d9                      		rcall	SUBT
                                 
                                 		; Here I check to the carry value - if it is 1, that means I need to subtract 1 from the quotient
000273 defb                      		rcall	LOAD_CARRY
000274 f049                      		breq	EXIT
                                 
                                 		; Here I subtract 1 from the quotient value		
000275 ede0                      		ldi		ZL, low(VAR)				; Load low byte into ZL register
000276 e0f1                      		ldi		ZH, high(VAR)				; Load high byte into ZH register
000277 deff                      		rcall	SUB_VAR
                                 
                                 		; Here I store the result from subtraction into my division results
000278 e3e0                      		ldi		ZL, low(SUB_RESULT)			; Load low byte into ZL register
000279 e0f1                      		ldi		ZH, high(SUB_RESULT)		; Load high byte into ZH register
00027a e7a0                      		ldi		XL, low(DIV_RESULT)			; Load div result address into X register, load low byte into X register
00027b e0b1                      		ldi		XH, high(DIV_RESULT)		; Load high byte into X register
00027c e038                      		ldi		index, 8
00027d de42                      		rcall	STORE_LOOP
                                 
                                 		EXIT:
00027e 2fe4                      				mov		ZL, count1					; Load low byte into ZL register
00027f 2ff5                      				mov		ZH, count2					; Load high byte into ZH register
000280 e7a0                      				ldi		XL, low(DIV_RESULT)			; Load div result address into X register, load low byte into X register
000281 e0b1                      				ldi		XH, high(DIV_RESULT)		; Load high byte into X register
000282 de4e                      				rcall	STORE_COUNTERS
                                 
000283 2744                      				clr		count1
000284 2755                      				clr		count2
000285 2766                      				clr		count3
000286 2777                      				clr		count4
000287 2788                      				clr		count5
000288 2799                      				clr		count6
                                 				
000289 910f                      				pop		mpr						; Restore all registers in reverves order
00028a 91ef                      				pop		ZL				
00028b 91ff                      				pop		ZH
00028c 91cf                      				pop		YL
00028d 91df                      				pop		YH
00028e 91af                      				pop		XL
00028f 91bf                      				pop		XH
000290 902f                      				pop		zero
000291 9508                      				ret
                                 ;-----------------------------------------------------------
                                 ; Func: DIV_VAR
                                 ; Desc: Divides two 64-bit numbers by decrementing by a variable amount
                                 ;-----------------------------------------------------------
                                 DIV_VAR:
000292 922f                      		push	zero					; Save zero register
000293 93bf                      		push	XH						; Save XH-ptr
000294 93af                      		push	XL						; Save XL-ptr
000295 93df                      		push	YH						; Save YH-ptr
000296 93cf                      		push	YL						; Save YL-ptr
000297 93ff                      		push	ZH						; Save ZH-ptr
000298 93ef                      		push	ZL						; Save ZL-ptr
000299 930f                      		push	mpr						; Save mpr
                                 		
00029a 2422                      		clr		zero					; Maintain zero semantics
00029b e7a0                      		ldi		XL, low(DIV_RESULT)		; Clear low byte of result data memory
00029c e0b1                      		ldi		XH, high(DIV_RESULT)	; Clear high byte of result data memory
00029d e038                      		ldi		index, 8
00029e de2d                      		rcall	CLR_LOOP
                                 				
                                 		; now we need to multiply the op1 by VAR 
00029f ede0                      		ldi		ZL, low(VAR)				; Load low byte into ZL register
0002a0 e0f1                      		ldi		ZH, high(VAR)				; Load high byte into ZH register
0002a1 e4a0                      		ldi		XL, low(MUL_OP1)			; Load multiplication operand address into X register, load low byte into X register
0002a2 e0b1                      		ldi		XH, high(MUL_OP1)			; Load high byte into X register
0002a3 e036                      		ldi		index, 6
0002a4 de1b                      		rcall	STORE_LOOP
                                 
0002a5 e6e0                      		ldi		ZL, low(DIV_OP1)			; Load low byte into ZL register
0002a6 e0f1                      		ldi		ZH, high(DIV_OP1)			; Load high byte into ZH register
0002a7 e4a6                      		ldi		XL, low(MUL_OP2)			; Load multiplication operand address into X register, load low byte into X register
0002a8 e0b1                      		ldi		XH, high(MUL_OP2)			; Load high byte into X register
0002a9 e036                      		ldi		index, 6
0002aa de15                      		rcall	STORE_LOOP
                                 
0002ab d11c                      		rcall	MULT
                                 		
                                 		; Here I store the result from multiply into my division operand and copy the op2 from div
0002ac e5e0                      		ldi		ZL, low(MUL_RESULT)			; Load low byte into ZL register
0002ad e0f1                      		ldi		ZH, high(MUL_RESULT)		; Load high byte into ZH register
0002ae e8a0                      		ldi		XL, low(DIV_VAR_OP1)		; Load div operand address into X register, load low byte into X register
0002af e0b1                      		ldi		XH, high(DIV_VAR_OP1)		; Load high byte into X register
0002b0 e038                      		ldi		index, 8
0002b1 de0e                      		rcall	STORE_LOOP
                                 		
0002b2 e6e8                      		ldi		ZL, low(DIV_OP2)			; Load low byte into ZL register
0002b3 e0f1                      		ldi		ZH, high(DIV_OP2)			; Load high byte into ZH register
0002b4 e8a8                      		ldi		XL, low(DIV_VAR_OP2)		; Load div operand address into X register, load low byte into X register
0002b5 e0b1                      		ldi		XH, high(DIV_VAR_OP2)		; Load high byte into X register
0002b6 e038                      		ldi		index, 8
0002b7 de08                      		rcall	STORE_LOOP
                                 		
                                 		; This will store the divide operands to subtract operands
0002b8 e8e0                      		ldi		ZL, low(DIV_VAR_OP1)		; Load low byte into ZL register
0002b9 e0f1                      		ldi		ZH, high(DIV_VAR_OP1)		; Load high byte into ZH register
0002ba e2a0                      		ldi		XL, low(SUB_OP1)			; Load subtraction operand address into X register, load low byte into X register
0002bb e0b1                      		ldi		XH, high(SUB_OP1)			; Load high byte into X register
0002bc e038                      		ldi		index, 8
0002bd de02                      		rcall	STORE_LOOP
                                 
0002be e8e8                      		ldi		ZL, low(DIV_VAR_OP2)		; Load low byte into ZL register
0002bf e0f1                      		ldi		ZH, high(DIV_VAR_OP2)		; Load high byte into ZH register
0002c0 e2a8                      		ldi		XL, low(SUB_OP2)			; Load subtraction operand address into X register, load low byte into X register
0002c1 e0b1                      		ldi		XH, high(SUB_OP2)			; Load high byte into X register
0002c2 e038                      		ldi		index, 8
0002c3 ddfc                      		rcall	STORE_LOOP
                                 
0002c4 d087                      		rcall	SUBT
                                 
                                 		; Here I exit if the carry value is 1 (meaning a negative result)
0002c5 dea9                      		rcall	LOAD_CARRY
0002c6 f009                      		breq	ADD_INIT_VAR
0002c7 c024                      		rjmp	EXIT_VAR
                                 		
                                 		ADD_INIT_VAR:
0002c8 ede0                      				ldi		ZL, low(VAR)				; Load low byte into ZL register
0002c9 e0f1                      				ldi		ZH, high(VAR)				; Load high byte into ZH register
0002ca ded8                      				rcall	ADD_VAR
                                 
                                 		DIV_LOOP_VAR:
0002cb ede0                      				ldi		ZL, low(VAR)				; Load low byte into ZL register
0002cc e0f1                      				ldi		ZH, high(VAR)				; Load high byte into ZH register
0002cd ded5                      				rcall	ADD_VAR
                                 
                                 		CONT_VAR:
0002ce e8e0                      				ldi		ZL, low(DIV_VAR_OP1)		; Load low byte into ZL register
0002cf e0f1                      				ldi		ZH, high(DIV_VAR_OP1)		; Load high byte into ZH register
0002d0 e2a0                      				ldi		XL, low(SUB_OP1)			; Load subtraction operand address into X register, load low byte into X register
0002d1 e0b1                      				ldi		XH, high(SUB_OP1)			; Load high byte into X register
0002d2 e038                      				ldi		index, 8
0002d3 ddec                      				rcall	STORE_LOOP
                                 
0002d4 e3e0                      				ldi		ZL, low(SUB_RESULT)			; Load low byte into ZL register
0002d5 e0f1                      				ldi		ZH, high(SUB_RESULT)		; Load high byte into ZH register
0002d6 e2a8                      				ldi		XL, low(SUB_OP2)			; Load subtraction operand address into X register, load low byte into X register
0002d7 e0b1                      				ldi		XH, high(SUB_OP2)			; Load high byte into X register
0002d8 e038                      				ldi		index, 8
0002d9 dde6                      				rcall	STORE_LOOP
                                 
0002da d071                      				rcall	SUBT
                                 													; Here we compare the carry bit to check if the value is negative
0002db e0f1                      				ldi		ZH, high(SUB_RESULT)
0002dc e3e0                      				ldi		ZL, low(SUB_RESULT)
0002dd e038                      				ldi		index, 8
                                 				CHECK_ZERO_VAR:
0002de 9101                      						ld		mpr, Z+
0002df 1502                      						cp		mpr, zero
0002e0 f431                      						brne	CHECK_CARRY_VAR
0002e1 953a                      						dec		index
0002e2 1532                      						cp		index, zero
0002e3 f7d1                      						brne	CHECK_ZERO_VAR
0002e4 9101                      						ld		mpr, Z+
0002e5 1502                      						cp		mpr, zero
0002e6 c005                      						rjmp	EXIT_VAR
                                 		CHECK_CARRY_VAR:
0002e7 de87                      				rcall	LOAD_CARRY
0002e8 f311                      				breq	DIV_LOOP_VAR
                                 				
                                 		; Here I subtract VAR from the quotient value
0002e9 ede0                      		ldi		ZL, low(VAR)				; Load low byte into ZL register
0002ea e0f1                      		ldi		ZH, high(VAR)				; Load high byte into ZH register
0002eb de8b                      		rcall	SUB_VAR
                                 
                                 		EXIT_VAR:				
0002ec 910f                      				pop		mpr						; Restore all registers in reverves order
0002ed 91ef                      				pop		ZL				
0002ee 91ff                      				pop		ZH
0002ef 91cf                      				pop		YL
0002f0 91df                      				pop		YH
0002f1 91af                      				pop		XL
0002f2 91bf                      				pop		XH
0002f3 902f                      				pop		zero
0002f4 9508                      				ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: SQRT
                                 ; Desc: Square roots a 48-bit number and generates a 48-bit
                                 ;		result.
                                 ;-----------------------------------------------------------
                                 SQRT:
0002f5 922f                      		push	zero					; Save zero register
0002f6 93bf                      		push	XH						; Save XH-ptr
0002f7 93af                      		push	XL						; Save XL-ptr
0002f8 93df                      		push	YH						; Save YH-ptr
0002f9 93cf                      		push	YL						; Save YL-ptr
0002fa 93ff                      		push	ZH						; Save ZH-ptr
0002fb 93ef                      		push	ZL						; Save ZL-ptr
0002fc 930f                      		push	mpr						; Save mpr
                                 
0002fd 2422                      		clr		zero					; Maintain zero semantics
0002fe eaa0                      		ldi		XL, low(SQRT_RESULT)	; Clear low byte of result data memory
0002ff e0b1                      		ldi		XH, high(SQRT_RESULT)	; Clear high byte of result data memory
000300 e036                      		ldi		index, 6
000301 ddca                      		rcall	CLR_LOOP
                                 		
                                 		; now we need to load 100 into VAR 
000302 e4e2                      		ldi		ZL, low(HUNDRED<<1)			; Load low byte into ZL register
000303 e0f8                      		ldi		ZH, high(HUNDRED<<1)		; Load high byte into ZH register
000304 eda0                      		ldi		XL, low(VAR)				; Load multiplication operand address into X register, load low byte into X register
000305 e0b1                      		ldi		XH, high(VAR)				; Load high byte into X register
000306 e036                      		ldi		index, 6
000307 ddbe                      		rcall	STORE_LPM
                                 
000308 d01b                      		rcall	SQRT_VAR
                                 
                                 		; now we need to load 1 into VAR 
000309 e2ea                      		ldi		ZL, low(ONE<<1)				; Load low byte into ZL register
00030a e0f8                      		ldi		ZH, high(ONE<<1)			; Load high byte into ZH register
00030b eda0                      		ldi		XL, low(VAR)				; Load multiplication operand address into X register, load low byte into X register
00030c e0b1                      		ldi		XH, high(VAR)				; Load high byte into X register
00030d e036                      		ldi		index, 6
00030e ddb7                      		rcall	STORE_LPM
                                 
00030f d014                      		rcall	SQRT_VAR
                                 
000310 2fe4                      		mov		ZL, count1					; Load low byte into ZL register
000311 2ff5                      		mov		ZH, count2					; Load high byte into ZH register
000312 eaa0                      		ldi		XL, low(SQRT_RESULT)		; Load sqrt operand address into X register, load low byte into X register
000313 e0b1                      		ldi		XH, high(SQRT_RESULT)		; Load high byte into X register
000314 ddbc                      		rcall	STORE_COUNTERS
                                 		
000315 2744                      		clr		count1
000316 2755                      		clr		count2
000317 2766                      		clr		count3
000318 2777                      		clr		count4
000319 2788                      		clr		count5
00031a 2799                      		clr		count6
                                 						
00031b 910f                      		pop		mpr						; Restore all registers in reverves order
00031c 91ef                      		pop		ZL				
00031d 91ff                      		pop		ZH
00031e 91cf                      		pop		YL
00031f 91df                      		pop		YH
000320 91af                      		pop		XL
000321 91bf                      		pop		XH
000322 902f                      		pop		zero
000323 9508                      		ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: SQRT_VAR
                                 ; Desc: Square roots a 48-bit number and generates a 48-bit
                                 ;		result.
                                 ;-----------------------------------------------------------
                                 SQRT_VAR:	
                                 		SQRT_LOOP:
000324 2fe4                      				mov		ZL, count1					; Load low byte into ZL register
000325 2ff5                      				mov		ZH, count2					; Load high byte into ZH register
000326 e4a0                      				ldi		XL, low(MUL_OP1)			; Load sqrt operand address into X register, load low byte into X register
000327 e0b1                      				ldi		XH, high(MUL_OP1)			; Load high byte into X register
000328 dda8                      				rcall	STORE_COUNTERS
                                 				
000329 2fe4                      				mov		ZL, count1					; Load low byte into ZL register
00032a 2ff5                      				mov		ZH, count2					; Load high byte into ZH register
00032b e4a6                      				ldi		XL, low(MUL_OP2)			; Load sqrt operand address into X register, load low byte into X register
00032c e0b1                      				ldi		XH, high(MUL_OP2)			; Load high byte into X register
00032d dda3                      				rcall	STORE_COUNTERS
                                 				
00032e d099                      				rcall	MULT
                                 				
                                 				; compare it to sqrt OP by subtracting
00032f e5e0                      				ldi		ZL, low(MUL_RESULT)			; Load low byte into ZL register
000330 e0f1                      				ldi		ZH, high(MUL_RESULT)		; Load high byte into ZH register
000331 e2a0                      				ldi		XL, low(SUB_OP1)			; Load multiplication operand address into X register, load low byte into X register
000332 e0b1                      				ldi		XH, high(SUB_OP1)			; Load high byte into X register
000333 e038                      				ldi		index, 8
000334 dd8b                      				rcall	STORE_LOOP
                                 
000335 e9e0                      				ldi		ZL, low(SQRT_OP)			; Load low byte into ZL register
000336 e0f1                      				ldi		ZH, high(SQRT_OP)			; Load high byte into ZH register
000337 e2a8                      				ldi		XL, low(SUB_OP2)			; Load multiplication operand address into X register, load low byte into X register
000338 e0b1                      				ldi		XH, high(SUB_OP2)			; Load high byte into X register
000339 e038                      				ldi		index, 8
00033a dd85                      				rcall	STORE_LOOP
                                 
00033b d010                      				rcall	SUBT
                                 
                                 				; Here I check to the carry value - if it is 1, that means I need to subtract 1 from the count
00033c de32                      				rcall	LOAD_CARRY
00033d f421                      				brne	FINISH_SQRT
                                 				
00033e ede0                      				ldi		ZL, low(VAR)				; Load low byte into ZL register
00033f e0f1                      				ldi		ZH, high(VAR)				; Load high byte into ZH register
000340 de62                      				rcall	ADD_VAR
000341 cfe2                      				rjmp	SQRT_LOOP
                                 
                                 
                                 		FINISH_SQRT:
                                 				; Here I subtract VAR from the quotient value
000342 ede0                      				ldi		ZL, low(VAR)				; Load low byte into ZL register
000343 e0f1                      				ldi		ZH, high(VAR)				; Load high byte into ZH register
000344 de32                      				rcall	SUB_VAR
                                 
                                 				; Here I store the result from subtraction into my sqrt results
000345 e3e0                      				ldi		ZL, low(SUB_RESULT)			; Load low byte into ZL register
000346 e0f1                      				ldi		ZH, high(SUB_RESULT)		; Load high byte into ZH register
000347 eaa0                      				ldi		XL, low(SQRT_RESULT)		; Load sqrt operand address into X register, load low byte into X register
000348 e0b1                      				ldi		XH, high(SQRT_RESULT)		; Load high byte into X register
000349 e036                      				ldi		index, 6
00034a dd75                      				rcall	STORE_LOOP
                                 		
00034b 9508                      		ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: SUBT
                                 ; Desc: Subtracts two 64-bit numbers and generates a 64-bit
                                 ;		result with a carry sign.
                                 ;-----------------------------------------------------------
                                 SUBT:
                                 		; Execute the function here
00034c 922f                      		push	zero					; Save zero register
00034d 93bf                      		push	XH						; Save XH-ptr
00034e 93af                      		push	XL						; Save XL-ptr
00034f 93df                      		push	YH						; Save YH-ptr
000350 93cf                      		push	YL						; Save YL-ptr
000351 93ff                      		push	ZH						; Save ZH-ptr
000352 93ef                      		push	ZL						; Save ZL-ptr
000353 930f                      		push	mpr						; Save mpr
000354 934f                      		push	r20
000355 935f                      		push	r21
                                 
000356 2422                      		clr		zero					; Maintain zero semantics
000357 e3a0                      		ldi		XL, low(SUB_RESULT)		; Clear low byte of result data memory
000358 e0b1                      		ldi		XH, high(SUB_RESULT)	; Clear high byte of result data memory
000359 e039                      		ldi		index, 9
00035a dd71                      		rcall	CLR_LOOP
                                 
                                 		; Load beginning address of first operand into X
00035b e2a0                      		ldi		XL, low(SUB_OP1)		; Load low byte of address
00035c e0b1                      		ldi		XH, high(SUB_OP1)		; Load high byte of address
                                 
                                 		; Load beginning address of second operand into Y
00035d e2c8                      		ldi		YL, low(SUB_OP2)		; Load low byte of address
00035e e0d1                      		ldi		YH, high(SUB_OP2)		; Load high byte of address
                                 
                                 		; Load beginning address of result into Z
00035f e3e0                      		ldi		ZL, low(SUB_RESULT)		; Load low byte of address
000360 e0f1                      		ldi		ZH, high(SUB_RESULT)	; Load high byte of address
                                 
                                 		; Execute the function here
000361 914d                              ld      r20, X+					; Load register 20 with 1rst byte of op1
000362 9159                              ld      r21, Y+					; Load register 21 with 1rst byte of op2
000363 1b54                              sub     r21, r20				; Subtract righthandside of equation
000364 9351                              st      Z+, r21					; Store result
000365 914d                              ld      r20, X+					; Load register 20 with 2nd byte of op1
000366 9159                              ld      r21, Y+					; Load register 21 with 2nd byte of op2
000367 0b54                              sbc		r21, r20				; Subtract lefthandside of equation with carry
000368 9351                              st		Z+, r21					; Store result
000369 914d                              ld      r20, X+					; Load register 20 with 3rd byte of op1
00036a 9159                              ld      r21, Y+					; Load register 21 with 3rd byte of op2
00036b 0b54                              sbc		r21, r20				; Subtract lefthandside of equation with carry
00036c 9351                              st		Z+, r21					; Store result
00036d 914d                              ld      r20, X+					; Load register 20 with 4th byte of op1
00036e 9159                              ld      r21, Y+					; Load register 21 with 4th byte of op2
00036f 0b54                              sbc		r21, r20				; Subtract lefthandside of equation with carry
000370 9351                      		st      Z+, r21					; Store result
000371 914d                              ld      r20, X+					; Load register 20 with 5th byte of op1
000372 9159                              ld      r21, Y+					; Load register 21 with 5th byte of op2
000373 0b54                              sbc		r21, r20				; Subtract lefthandside of equation with carry
000374 9351                              st		Z+, r21					; Store result
000375 914d                              ld      r20, X+					; Load register 20 with 6th byte of op1
000376 9159                              ld      r21, Y+					; Load register 21 with 6th byte of op2
000377 0b54                              sbc		r21, r20				; Subtract lefthandside of equation with carry
000378 9351                      		st      Z+, r21					; Store result
000379 914d                              ld      r20, X+					; Load register 20 with 7th byte of op1
00037a 9159                              ld      r21, Y+					; Load register 21 with 7th byte of op2
00037b 0b54                              sbc		r21, r20				; Subtract lefthandside of equation with carry
00037c 9351                              st		Z+, r21					; Store result
00037d 914c                              ld      r20, X					; Load register 20 with 8th byte of op1
00037e 8158                              ld      r21, Y					; Load register 21 with 8th byte of op2
00037f 0b54                              sbc		r21, r20				; Subtract lefthandside of equation with carry
000380 9351                      		st		Z+, r21					; Store result
000381 f408                              brcc	EXIT2					; If no carry, return to caller
000382 83b0                              st		Z, XH					; Store carry result if it exists
                                 
                                 EXIT2:
000383 915f                      		pop		r21
000384 914f                      		pop		r20
000385 910f                      		pop		mpr						; Restore all registers in reverves order
000386 91ef                      		pop		ZL				
000387 91ff                      		pop		ZH
000388 91cf                      		pop		YL
000389 91df                      		pop		YH
00038a 91af                      		pop		XL
00038b 91bf                      		pop		XH
00038c 902f                      		pop		zero
00038d 9508                              ret								; End a function with RET
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: ADD_
                                 ; Desc: Adds two 48-bit numbers and generates a 54-bit number
                                 ;		where the high byte of the result contains the carry
                                 ;		out bit.
                                 ;-----------------------------------------------------------
                                 ADD_:
00038e 922f                      		push	zero					; Save zero register
00038f 93bf                      		push	XH						; Save XH-ptr
000390 93af                      		push	XL						; Save XL-ptr
000391 93df                      		push	YH						; Save YH-ptr
000392 93cf                      		push	YL						; Save YL-ptr
000393 93ff                      		push	ZH						; Save ZH-ptr
000394 93ef                      		push	ZL						; Save ZL-ptr
000395 930f                      		push	mpr						; Save mpr
000396 934f                      		push	r20
000397 935f                      		push	r21
                                 
000398 2422                      		clr		zero					; Maintain zero semantics
000399 e1a0                      		ldi		XL, low(ADD_RESULT)		; Clear low byte of result data memory
00039a e0b1                      		ldi		XH, high(ADD_RESULT)	; Clear high byte of result data memory
00039b e037                      		ldi		index, 7
00039c dd2f                      		rcall	CLR_LOOP
                                 
                                 		; Load beginning address of first operand into X
00039d e0a0                      		ldi		XL, low(ADD_OP1)		; Load low byte of address
00039e e0b1                      		ldi		XH, high(ADD_OP1)		; Load high byte of address
                                 
                                 		; Load beginning address of second operand into Y
00039f e0c6                      		ldi		YL, low(ADD_OP2)		; Load low byte of address
0003a0 e0d1                      		ldi		YH, high(ADD_OP2)		; Load high byte of address
                                 
                                 		; Load beginning address of result into Z
0003a1 e1e0                      		ldi		ZL, low(ADD_RESULT)	; Load low byte of address
0003a2 e0f1                      		ldi		ZH, high(ADD_RESULT)	; Load high byte of address
                                 
                                 		; Execute the function here
0003a3 914d                              ld      r20, X+					; Load register 20 with 1rst byte of op1
0003a4 9159                              ld      r21, Y+					; Load register 21 with 1rst byte of op2
0003a5 0f54                              add     r21, r20				; Add together righthandside of equation
0003a6 9351                              st      Z+, r21					; Store result
0003a7 914d                              ld      r20, X+					; Load register 20 with 2nd byte of op1
0003a8 9159                              ld      r21, Y+					; Load register 21 with 2nd byte of op2
0003a9 1f54                              adc		r21, r20				; Add together lefthandside of equation with carry
0003aa 9351                              st		Z+, r21					; Store result
0003ab 914d                              ld      r20, X+					; Load register 20 with 3rd byte of op1
0003ac 9159                              ld      r21, Y+					; Load register 21 with 3rd byte of op2
0003ad 1f54                              adc		r21, r20				; Add together lefthandside of equation with carry
0003ae 9351                              st		Z+, r21					; Store result
0003af 914d                              ld      r20, X+					; Load register 20 with 4th byte of op1
0003b0 9159                              ld      r21, Y+					; Load register 21 with 4th byte of op2
0003b1 1f54                              adc		r21, r20				; Add together lefthandside of equation with carry
0003b2 9351                              st		Z+, r21					; Store result
0003b3 914d                              ld      r20, X+					; Load register 20 with 5th byte of op1
0003b4 9159                              ld      r21, Y+					; Load register 21 with 5th byte of op2
0003b5 1f54                              adc		r21, r20				; Add together lefthandside of equation with carry
0003b6 9351                              st		Z+, r21					; Store result
0003b7 914c                              ld      r20, X					; Load register 20 with 6th byte of op1
0003b8 8158                              ld      r21, Y					; Load register 21 with 6th byte of op2
0003b9 1f54                              adc		r21, r20				; Add together lefthandside of equation with carry
0003ba 9351                              st		Z+, r21					; Store result
0003bb f408                              brcc	EXIT3					; If no carry, return to caller
0003bc 83b0                              st		Z, XH					; Store carry result if it exists
                                 
                                 EXIT3:
0003bd 915f                      		pop		r21
0003be 914f                      		pop		r20
0003bf 910f                      		pop		mpr						; Restore all registers in reverves order
0003c0 91ef                      		pop		ZL				
0003c1 91ff                      		pop		ZH
0003c2 91cf                      		pop		YL
0003c3 91df                      		pop		YH
0003c4 91af                      		pop		XL
0003c5 91bf                      		pop		XH
0003c6 902f                      		pop		zero
0003c7 9508                              ret								; End a function with RET
                                 
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: MULT
                                 ; Desc: Multiplies two 48-bit numbers and generates a 96-bit 
                                 ;		result.
                                 ;-----------------------------------------------------------
                                 MULT:
                                 		; Execute the function here
0003c8 923f                      		push 	A						; Save A register
0003c9 924f                      		push	B						; Save B register
0003ca 921f                      		push	rhi						; Save rhi register
0003cb 920f                      		push	rlo						; Save rlo register
0003cc 922f                      		push	zero					; Save zero register
0003cd 93bf                      		push	XH						; Save XH-ptr
0003ce 93af                      		push	XL						; Save XL-ptr
0003cf 93df                      		push	YH						; Save YH-ptr
0003d0 93cf                      		push	YL						; Save YL-ptr
0003d1 93ff                      		push	ZH						; Save ZH-ptr
0003d2 93ef                      		push	ZL						; Save ZL-ptr
0003d3 931f                      		push	oloop					; Save outer counter
0003d4 932f                      		push	iloop					; Save inner counter
0003d5 930f                      		push	mpr						; Save mpr
0003d6 934f                      		push	r20						; Save r20
0003d7 935f                      		push	r21						; Save r21
                                 
0003d8 2422                      		clr		zero					; Maintain zero semantics
0003d9 e5a0                      		ldi		XL, low(MUL_RESULT)		; Clear low byte of result data memory
0003da e0b1                      		ldi		XH, high(MUL_RESULT)	; Clear high byte of result data memory
0003db e03c                      		ldi		index, 12
0003dc dcef                      		rcall	CLR_LOOP
                                 
                                 		; Set Y to beginning address of B
0003dd e4c6                      		ldi		YL, low(MUL_OP2)		; Load low byte
0003de e0d1                      		ldi		YH, high(MUL_OP2)		; Load high byte
                                 
                                 		; Set Z to begginning address of resulting Product
0003df e5e0                      		ldi		ZL, low(MUL_RESULT)		; Load low byte
0003e0 e0f1                      		ldi		ZH, high(MUL_RESULT)	; Load high byte
                                 
                                 		; Begin outer for loop
0003e1 e016                      		ldi		oloop, 6				; Load counter for 8 loops
                                 MUL_OLOOP:
                                 		; Set X to beginning address of A
0003e2 e4a0                      		ldi		XL, low(MUL_OP1)		; Load low byte
0003e3 e0b1                      		ldi		XH, high(MUL_OP1)		; Load high byte
                                 
                                 		; Begin inner for loop
0003e4 e026                      		ldi		iloop, 6				; Load counter for 8 loops
                                 MUL_ILOOP:
0003e5 903d                      		ld		A, X+					; Get byte of A operand
0003e6 8048                      		ld		B, Y					; Get byte of B operand
0003e7 9c34                      		mul		A,B						; Multiply A and B
0003e8 9031                      		ld		A, Z+					; Get a result byte from memory
0003e9 9041                      		ld		B, Z+					; Get the next result byte from memory
0003ea 0c03                      		add		rlo, A					; rlo <= rlo + A
0003eb 1c14                      		adc		rhi, B					; rhi <= rhi + B + carry
0003ec 9031                      		ld		A, Z+					; Get a third byte from the result
0003ed 1c32                      		adc		A, zero					; Add carry to A
0003ee 9041                      		ld		B, Z+					; Get a fourth byte from the result
0003ef 1c42                      		adc		B, zero					; Add carry to B
0003f0 9101                      		ld		mpr, Z+					; Get a fifth byte from the result
0003f1 1d02                      		adc		mpr, zero				; Add carry to mpr
0003f2 9141                      		ld		r20, Z+					; Get a fourth byte from the result
0003f3 1d42                      		adc		r20, zero					; Add carry to r20
0003f4 8150                      		ld		r21, Z					; Get a fifth byte from the result
0003f5 1d52                      		adc		r21, zero				; Add carry to r21
0003f6 8350                      		st		Z, r21					; Store seventh byte to memory
0003f7 9342                      		st		-Z, r20					; Store sixth byte to memory
0003f8 9302                      		st		-Z, mpr					; Store fifth byte to memory
0003f9 9242                      		st		-Z, B					; Store fourth byte to memory
0003fa 9232                      		st		-Z, A					; Store third byte to memory
0003fb 9212                      		st		-Z, rhi					; Store second byte to memory
0003fc 9202                      		st		-Z, rlo					; Store first byte to memory
0003fd 9631                      		adiw	ZH:ZL, 1				; Z <= Z + 1			
0003fe 952a                      		dec		iloop					; Decrement counter
0003ff f729                      		brne	MUL_ILOOP				; Loop if iLoop != 0
                                 		; End inner for loop
                                 
000400 9735                      		sbiw	ZH:ZL, 5				; Z <= Z - 5 (need to shift 5 over for 48 bit MUL)
000401 9621                      		adiw	YH:YL, 1				; Y <= Y + 1
000402 951a                      		dec		oloop					; Decrement counter
000403 f6f1                      		brne	MUL_OLOOP				; Loop if oLoop != 0
                                 		; End outer for loop
                                 		 		
000404 915f                      		pop		r21
000405 914f                      		pop		r20
000406 910f                      		pop		mpr						; Restore all registers in reverves order
000407 912f                      		pop		iloop
000408 911f                      		pop		oloop
000409 91ef                      		pop		ZL				
00040a 91ff                      		pop		ZH
00040b 91cf                      		pop		YL
00040c 91df                      		pop		YH
00040d 91af                      		pop		XL
00040e 91bf                      		pop		XH
00040f 902f                      		pop		zero
000410 900f                      		pop		rlo
000411 901f                      		pop		rhi
000412 904f                      		pop		B
000413 903f                      		pop		A
000414 9508                      		ret								; End a function with RET
                                 
                                 
                                 ;***********************************************************
                                 ;*	Custom stored data
                                 ;*	(feel free to edit these or add others)
                                 ;***********************************************************
000415 0001
000416 0000
000417 0000
000418 0000                      ONE:		.DB 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
000419 0002
00041a 0000
00041b 0000
00041c 0000                      TWO:		.DB	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00041d 0028
00041e 0000
00041f 0000
000420 0000                      FOURTY:		.DB 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
000421 0100
000422 0000
000423 0000
000424 0000                      HUNDRED:	.DB 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
000425 1000
000426 0000
000427 0000
000428 0000                      THOUSAND:	.DB 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
000429 0000
00042a 0100
00042b 0000
00042c 0000                      MIL:		.DB 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00
00042d 0000
00042e 0000
00042f 0010
000430 0000                      BIL:		.DB 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00
000431 ffff
000432 ffff
000433 ffff
000434 ffff                      NEG_ONE:	.DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
000435 fffe
000436 ffff
000437 ffff
000438 ffff                      NEG_TWO:	.DB 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
000439 03e8
00043a 0000
00043b 0000
00043c 0000                      THOUSANDX:	.DB 0xE8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00043d 0019
00043e 0000
00043f 0000
000440 0000                      TWENTYFIVE:	.DB 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                 
                                 
                                 ;***end of your code***end of your code***end of your code***end of your code***end of your code***
                                 ;*************************** Do not change anything below this point*******************************
                                 ;*************************** Do not change anything below this point*******************************
                                 ;*************************** Do not change anything below this point*******************************
                                 
                                 Grading:
000441 0000                      		nop					; Check the results in data memory begining at address $0E00 (The TA will set a breakpoint here)
000442 cffe                      rjmp Grading
                                 
                                 
                                 ;***********************************************************
                                 ;*	Stored program data that you cannot change
                                 ;***********************************************************
                                 
                                 ; Contents of program memory will be changed during testing
                                 ; The label names (OrbitalRadius, SelectedPlanet, PlanetInfo, MercuryGM, etc) are not changed
                                 ; NOTE: All values are provided using the little-endian convention.
000443 1964                      OrbitalRadius:	.DB	0x64, 0x19				; the radius that should be used during computations (in kilometers)
                                 											; in this example, the value is 6,500 kilometers
                                 											; the radius will be provided as a 16 bit unsigned value (unless you are
                                 											; completing the extra credit, in which case the radius is an unsigned 24 bit value)
                                 
000444 0002                      SelectedPlanet:	.DB	0x02, 0x00				; This is how your program knows which GM value should be used.
                                 											; SelectedPlanet is an unsigned 8 bit value that provides you with the
                                 											; index of the planet (and hence, tells you which GM value to use).
                                 											; Note: only the first byte is used. The second byte is just for padding.
                                 											; In this example, the value is 2. If we check the planet at index 2, (from the data below)
                                 											; that corresponds to Earth.
                                 											; if the value was 7, that would correspond to the planet Neptune
                                 
                                 PlanetInfo:									; Note that these values will be changed during testing!
000445 560e
000446 0000                      MercuryGM:		.DB	0x0E, 0x56, 0x00, 0x00	; Gravitational parameters will be provided as unsigned 32 bit integers (little-endian)
000447 f524
000448 0004                      VenusGM:		.DB	0x24, 0xF5, 0x04, 0x00	; the units are in: (km * km * km)/(sec * sec)
000449 1508
00044a 0006                      EarthGM:		.DB	0x08, 0x15, 0x06, 0x00	; <-- note that this is 398,600
00044b a74e
00044c 0000                      MarsGM:			.DB	0x4E, 0xA7, 0x00, 0x00
00044d 1330
00044e 078d                      JupiterGM:		.DB	0x30, 0x13, 0x8D, 0x07	; A word of advice... treat these like an array, where each element
00044f c7f8
000450 0242                      SaturnGM:		.DB	0xF8, 0xC7, 0x42, 0x02	; occupies 4 bytes of memory.
000451 68d0
000452 0058                      UranusGM:		.DB	0xD0, 0x68, 0x58, 0x00	; Mercury is at index 0, Venus is at index 1, ...and the final planet is at index 8.
000453 4b38
000454 0068                      NeptuneGM:		.DB	0x38, 0x4B, 0x68, 0x00
000455 ffff
000456 ffff                      FinalGM:		.DB	0xFF, 0xFF, 0xFF, 0xFF
                                 
                                 
                                 ;***********************************************************
                                 ;*	Data Memory Allocation for Results
                                 ;*	Your answers need to be stored into these locations (using little-endian representation)
                                 ;*	These exact variable names will be used when testing your code!
                                 ;***********************************************************
                                 .dseg
                                 .org	$0E00						; data memory allocation for results - Your grader only checks $0E00 - $0E14
000e00                           Quotient:		.byte 3				; This is the intermediate value that is generated while you are computing the satellite's velocity.
                                 									; It is a 24 bit unsigned value.
000e03                           Velocity:		.byte 2				; This is where you will store the computed velocity. It is a 16 bit signed number.
                                 									; The velocity value is normally positive, but it can also be -1 or -2 in case of error
                                 									; (see "Special Cases" in the assignment documentation).
000e05                           Product:		.byte 7				; This is the intermediate product that is generated while you are computing the orbital period.
000e0c                           Period:			.byte 3				; This is where the orbital period of the satellite will be placed.
                                 									; It is a 24 bit signed value.
                                 									; The period value is normally positive, but it can also be -1 or -2 in case of error
                                 									; (see "Special Cases" in the assignment documentation).
                                 
                                 ;***********************************************************
                                 ;*	Additional Program Includes
                                 ;***********************************************************
                                 ; There are no additional file includes for this program


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega128" register use summary:
x  :  26 y  :  15 z  :  53 r0 :   5 r1 :   4 r2 :  49 r3 :   9 r4 :   9 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  73 r17:   4 r18:   4 r19:  95 r20:  49 
r21:  63 r22:   7 r23:   7 r24:   7 r25:   7 r26: 101 r27:  97 r28:  16 
r29:  16 r30: 116 r31: 114 
Registers used: 24 out of 35 (68.6%)

"ATmega128" instruction use summary:
.lds  :   0 .sts  :   0 adc   :  11 add   :   5 adiw  :   2 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   6 brbs  :   0 
brcc  :   3 brcs  :   0 break :   0 breq  :   7 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  18 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  25 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  23 cpc   :   0 
cpi   :   0 cpse  :   0 dec   :  10 elpm  :   0 eor   :   0 fmul  :   0 
fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   1 
jmp   :   5 ld    :  58 ldd   :   0 ldi   : 432 lds   :   0 lpm   :   3 
lsl   :   0 lsr   :   0 mov   :  32 movw  :   0 mul   :   2 muls  :   0 
mulsu :   0 neg   :   0 nop   :   1 or    :   0 ori   :   0 out   :   2 
pop   :  60 push  :  60 rcall : 136 ret   :  22 reti  :   0 rjmp  :   7 
rol   :   0 ror   :   0 sbc   :   7 sbci  :   0 sbi   :   0 sbic  :   0 
sbis  :   0 sbiw  :   1 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  34 std   :   0 
sts   :   0 sub   :   1 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 

Instructions used: 28 out of 114 (24.6%)

"ATmega128" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0008ae   1956    128   2084  131072   1.6%
[.dseg] 0x000100 0x000e0f      0    147    147    4096   3.6%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
